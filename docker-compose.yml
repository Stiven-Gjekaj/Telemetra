version: '3.8'

services:
  # Zookeeper - Coordination service for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: telemetra-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - telemetra-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka - Event streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: telemetra-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 24
    networks:
      - telemetra-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 5

  # PostgreSQL - Metrics database
  postgres:
    image: postgres:15-alpine
    container_name: telemetra-postgres
    environment:
      POSTGRES_DB: telemetra
      POSTGRES_USER: telemetra_user
      POSTGRES_PASSWORD: telemetra_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - telemetra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telemetra_user -d telemetra"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Real-time cache
  redis:
    image: redis:7-alpine
    container_name: telemetra-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - telemetra-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: telemetra-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - telemetra-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 15s
      timeout: 10s
      retries: 5

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: telemetra-spark-worker
    depends_on:
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - telemetra-network

  # Spark Streaming Job
  spark-streaming:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: telemetra-spark-streaming
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=telemetra
      - POSTGRES_USER=telemetra_user
      - POSTGRES_PASSWORD=telemetra_pass
    volumes:
      - ./spark:/app
    networks:
      - telemetra-network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telemetra-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://telemetra_user:telemetra_pass@postgres:5432/telemetra
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - telemetra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 5

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telemetra-frontend
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - telemetra-network
    stdin_open: true
    tty: true

  # Mock Twitch Data Producer
  producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    container_name: telemetra-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=twitch-events
      - PRODUCER_INTERVAL=1
      - MOCK_CHANNELS=xqc,shroud,pokimane,ninja,summit1g
    volumes:
      - ./producer:/app
    networks:
      - telemetra-network
    restart: unless-stopped

networks:
  telemetra-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
